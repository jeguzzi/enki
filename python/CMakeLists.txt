# find Python


if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
set(CMAKE_MACOSX_RPATH 1)
endif()

message("We are using Cmake ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}")

IF (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} GREATER 3.11)
  find_package (Python COMPONENTS Interpreter Development)
  message(STATUS "Python executable ${Python_EXECUTABLE}")
	# make sure we have the right modules
	if (Python_FOUND AND Qt5Widgets_FOUND AND Qt5OpenGL_FOUND)
		message(STATUS "Python libs and executable found looking for boost::python")
		FIND_PACKAGE(Boost COMPONENTS system python${Python_VERSION_MAJOR}${Python_VERSION_MINOR})
		if (Boost_FOUND)
			message(STATUS "boost::python found, generating python bindings")
			include_directories(${PROJECT_SOURCE_DIR} ${Python_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
			Python_add_library(pyenki MODULE enki.cpp)
			target_link_libraries(pyenki  PRIVATE enki enkiviewer ${Boost_LIBRARIES} Qt5::OpenGL Qt5::Widgets ${OPENGL_gl_LIBRARY})

      file(MAKE_DIRECTORY ${Python_SITELIB}/pyenki)
      install(TARGETS pyenki LIBRARY DESTINATION ${Python_SITELIB}/pyenki RENAME __init__.py)

      file(INSTALL "__init__.py" DESTINATION ${Python_SITELIB}/pyenki)
      file(INSTALL "docs/source/pyenki.py" DESTINATION ${Python_SITELIB}/pyenki RENAME __init__.pyi)
      file(INSTALL "py.typed" DESTINATION ${Python_SITELIB}/pyenki)


		else (Boost_FOUND)
			message(WARNING "You need boost::python to generate Python bindings")
		endif (Boost_FOUND)
	else ()
		message(WARNING "Python libs or executable, or Qt5, or OpenGL not found, skipping Python bindings")
	endif ()
ELSE ()
	find_package(PythonInterp)
	message(STATUS "Python version from interpreter is ${PYTHON_VERSION_STRING}")
	set(Python_ADDITIONAL_VERSIONS ${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR})
	find_package(PythonLibs)
	# make sure we have the right modules
if (PYTHONLIBS_FOUND AND PYTHONINTERP_FOUND AND Qt5Widgets_FOUND AND Qt5OpenGL_FOUND)
	message(STATUS "Python libs and executable found, looking for boost::python")
	find_package(Boost COMPONENTS python)
	if (Boost_FOUND)
		message(STATUS "boost::python found, generating python bindings")
		include_directories(${PROJECT_SOURCE_DIR} ${PYTHON_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
		python_add_module(pyenki enki.cpp)
		target_link_libraries(pyenki enki enkiviewer Qt5::OpenGL Qt5::Widgets ${OPENGL_gl_LIBRARY} ${Boost_LIBRARIES} ${PYTHON_LIBRARIES})
		# fix for old python_add_module
		set_target_properties(pyenki PROPERTIES PREFIX "")
		if (PYTHON_CUSTOM_TARGET)
			install(TARGETS pyenki LIBRARY DESTINATION ${PYTHON_CUSTOM_TARGET})
		else (PYTHON_CUSTOM_TARGET)
			if (PYTHON_DEB_INSTALL_TARGET)
				set(PYTHON_COMMAND "import sys; print 'lib/python'+str(sys.version_info[0])+'.'+str(sys.version_info[1])+'/dist-packages'")
			else (PYTHON_DEB_INSTALL_TARGET)
				set(PYTHON_COMMAND "from distutils.sysconfig import get_python_lib; print(get_python_lib(1, prefix='${CMAKE_INSTALL_PREFIX}'))")
			endif (PYTHON_DEB_INSTALL_TARGET)
			execute_process(COMMAND "${PYTHON_EXECUTABLE}" "-c" "${PYTHON_COMMAND}" OUTPUT_VARIABLE PYTHON_SITE_MODULES OUTPUT_STRIP_TRAILING_WHITESPACE)
			install(TARGETS pyenki LIBRARY DESTINATION ${PYTHON_SITE_MODULES})
		endif (PYTHON_CUSTOM_TARGET)
	else (Boost_FOUND)
		message(WARNING "You need boost::python to generate Python bindings")
	endif (Boost_FOUND)
else ()
	message(WARNING "Python libs or executable, or Qt5, or OpenGL not found, skipping Python bindings")
endif ()
ENDIF ()
